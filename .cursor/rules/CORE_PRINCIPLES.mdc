---
alwaysApply: true
description: "定义项目的核心价值观与最高决策原则，确保所有决策都服务于长期目标。"
version: 1.1
---
# 核心原则 (Core Principles)

> **最高目标**: 在保证“不重复推送 & 快速迭代”的前提下，用最小复杂度交付业务价值。

所有工作都必须遵循以下基本原则：

### 1. 可靠性原则 (Reliability)

这是保证产品质量的基石，又称 **“MVP守门员”**。任何代码改动必须通过：

| # | 原则 | 目的 |
|---|---|---|
| 1 | **数据唯一源** | 业务状态只写入 **PostgreSQL** 数据库，防止数据不一致和重复推送。 |
| 2 | **幂等操作** | 所有外部交互（如推送）必须具备幂等性，避免重复消息。 |
| 3 | **单一入口** | 核心业务流程必须收敛于统一的入口，避免多头管理。 |
| 4 | **自动回归测试** | 核心逻辑必须有自动化测试覆盖，防止问题复现。 |
| 5 | **关键监控** | 必须对核心服务进行监控和告警，确保问题能被及时发现。 |

### 2. 同步性原则 (Synchronization)

确保项目各项产出物的一致性，降低维护成本。

-   **代码、测试、文档三位一体**: 任何代码变更，必须同步更新相关的测试用例和技术文档。不允许出现代码与文档脱节的情况。

### 3. 精简原则 (Simplicity)

保持迭代速度和系统可维护性的关键。

-   **先规划再编码**: 在开始具体任务前，必须先进行思考和规划（例如，编写简短的任务说明），明确动机和验收标准。
-   **最小化、原子化的变更**: 坚持提交小的、专注的 Pull Requests。功能、重构、格式化等不同类型的修改应在不同的 PR 中提交。
-   **选择最简单的可行方案**: 避免过度设计，用最简单、最清晰的方式解决问题。

### 4. 安全原则 (Security)

- **最小权限**: 服务、数据库、第三方 API 均应采用最小可用权限配置，拒绝默认全权。
- **密钥轮换**: 所有密钥、Token 必须支持轮换策略，生产环境须至少 90 天轮换一次。
- **审计日志**: 对重要操作（推送、数据库迁移、权限变更）写入不可篡改的审计日志，留痕追踪。

### 5. 可观测性原则 (Observability)

- **性能基线**: 关键路径 P95 延迟、吞吐量必须设定目标值并在监控中可视化。
- **指标完备**: 日志（Winston）、Metrics（Prometheus/自定义）与 Trace（OpenTelemetry）三位一体。
- **主动告警**: 越限告警 + 变更后 24h 高频监控，确保新功能不会造成隐患。