---
alwaysApply: true
description: "定义了项目的目录结构和每一层的用途，以确保代码组织的一致性。"
---
# 项目结构

本项目采用模块化、分层的架构。请遵循以下结构以保持代码的清晰度和关注点分离。

-   **`src/`**: 应用程序主源码目录。
    -   **`src/api/`**: 包含路由定义和请求/响应处理。它作为 API 请求的入口点，应将业务逻辑委托给 `services` 层处理。可参考 [feishu-routes.ts](mdc:src/api/feishu-routes.ts) 作为示例。
    -   **`src/services/`**: 存放核心业务逻辑。服务层负责协调不同模块的功能以完成特定任务。
    -   **`src/modules/`**: 包含自成一体的功能模块（例如, [feishu](mdc:src/modules/feishu/), [fetcher](mdc:src/modules/fetcher/), [processor](mdc:src/modules/processor/)）。每个模块封装了特定的功能领域。
    -   **`src/utils/`**: 用于存放与特定业务逻辑无关的、可共享的辅助函数。
    -   **`src/types/`**: 存放共享的 TypeScript 类型定义和接口，例如 [index.ts](mdc:src/types/index.ts)。
    -   **`src/config/`**: 管理应用程序的配置。可参考 [index.ts](mdc:src/config/index.ts)。
-   **配置 (Configuration)**: 敏感密钥必须通过环境变量进行管理。 [env.example](mdc:env.example) 文件是所有必需变量的模板。