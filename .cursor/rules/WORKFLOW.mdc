---
alwaysApply: true
description: "定义一个统一的、适用于所有开发任务的三阶段工作流，确保执行的系统性和稳定性。"
version: 1.1
---
# 标准工作流程 (Standard Workflow)

为保证高质量的交付，所有任务（包括新功能、Bug修复、重构、文档更新等）都必须遵循以下三阶段工作流。

### 阶段一：分析与诊断

**声明格式**: `【分析问题】`

**目标**: 彻底理解问题，并找到根本原因，为制定正确的方案提供充足依据。

**必须做的事**:
-   **理解意图**: 如果需求或问题描述不清晰，必须提问澄清。
-   **全面调查**: 搜索所有相关代码、文档和历史记录。
-   **复现问题**: 对于Bug，必须有稳定的复现步骤。
-   **识别根因**: 找到问题的根本原因，而不仅仅是表面症状。

**绝对禁止**:
-   ❌ 在未完全理解问题前，修改任何代码。
-   ❌ 急于给出未经深思熟虑的解决方案。
-   ❌ 跳过调查和分析步骤。

---

### 阶段二：方案与规划

**声明格式**: `【制定方案】`

**目标**: 设计一个清晰、简单且符合核心原则的解决方案，并获得确认。

**必须做的事**:
-   **设计方案**: 提出一个或多个解决方案，并评估其优劣。
-   **检查原则**: 确保方案符合 **[CORE_PRINCIPLES.mdc](mdc:.cursor/rules/CORE_PRINCIPLES.mdc)** 中的所有要求。
-   **明确变更**: 列出所有将被修改、创建或删除的文件清单。
-   **消除重复**: 如果发现重复逻辑，方案中必须包含消除重复的设计。
-   **获得确认**: 在进入执行阶段前，必须等待用户的明确批准。

**风险评估 & 回滚策略**
- 对数据库结构或外部 API 变更，必须评估最坏影响并设计回滚脚本/降级方案。

**角色权责**
|- **Owner**: 提交方案并跟进落地
|- **Reviewer**: 评审技术风险与核心原则符合性
|- **QA**: 评估测试覆盖、验收标准

---

### 阶段三：执行与验证

**声明格式**: `【执行方案】`

**目标**: 高质量地实现方案，并验证其正确性，确保交付的可靠性。

**必须做的事**:
-   **严格按方案实现**: 确保执行与已确认的方案一致。
-   **编写/更新测试**: 对于代码变更，必须有相应的单元测试或集成测试。
-   **同步更新文档**: 确保所有相关的文档（如 `PRD.md`, `API.md` 等）都与代码变更保持同步。
-   **运行检查**: 确保所有自动化检查（linting, type-checking, tests）都通过。

**Definition of Done (DoD) Checklist**
1. 代码通过 CI（lint/type/test/coverage≥基线）
2. 相关文档 & PR 描述已更新
3. 监控指标/告警规则已覆盖
4. 若涉及数据/配置，回滚脚本已验证

**Post-Merge Retro**
- 复杂功能上线后一周内回顾监控指标、用户反馈，必要时迭代优化。

**绝对禁止**:
-   ❌ 提交未经测试的代码。
-   ❌ 遗漏文档的更新。
-   ❌ 执行与方案不符的修改。